import glob
import cv2
import numpy as np
from skimage import img_as_float, img_as_ubyte
from PIL import Image
import matplotlib.pyplot as plt
import os

def load_images(directory):
    jpgs = glob.glob(directory + '/*.jpeg')
    return jpgs
    
images_train = load_images(r"C:\Users\solbo\OneDrive\Pictures\AL_jpeg_images")
training_tensor   = np.ndarray(shape=(len(images_train), 983*800), dtype=np.float64)

for i in range(len(images_train)):
    img = cv2.imread(images_train[i], 0).flatten()
    img = img.reshape(983,800)
    training_tensor[i,:] = np.array(img, dtype='float64').flatten()
    if i <= 7:
        plt.subplot(2,4,1+i)
        plt.imshow(img, cmap='gray')
        plt.tick_params()
        
mean_face = np.zeros((1,983*800))
for i in training_tensor:
    mean_face = np.add(mean_face,i)
mean_face = np.divide(mean_face,float(len(images_train))).flatten()

plt.imshow(mean_face.reshape(983, 800), cmap='gray')
plt.tick_params()
plt.show()

normalised_training_tensor = np.ndarray(shape=(len(images_train), 983*800))
for i in range(len(images_train)):
    normalised_training_tensor[i] = np.subtract(training_tensor[i],mean_face)
    
for i in range(len(images_train)):
    img = normalised_training_tensor[i].reshape(983,800)
    if i <= 7:
        plt.subplot(2,4,1+i)
        plt.imshow(img, cmap='gray')
        plt.tick_params()
plt.show()

cov_matrix = np.cov(normalised_training_tensor)
cov_matrix = np.divide(cov_matrix,8.0)
eigenvalues, eigenvectors, = np.linalg.eig(cov_matrix)
print('Covariance matrix of X: \n%s' %cov_matrix)

eig_pairs = [(eigenvalues[index], eigenvectors[:,index]) for index in range(len(eigenvalues))]

# Sort the eigen pairs in descending order:
eig_pairs.sort(reverse=True)
eigvalues_sort  = [eig_pairs[index][0] for index in range(len(eigenvalues))]
eigvectors_sort = [eig_pairs[index][1] for index in range(len(eigenvalues))]

var_comp_sum = np.cumsum(eigvalues_sort)/sum(eigvalues_sort)

# Show cumulative proportion of varaince with respect to components
print("Cumulative proportion of variance explained vector: \n%s" %var_comp_sum)

# x-axis for number of principal components kept
num_comp = range(1,len(eigvalues_sort)+1)
plt.title('Cum. Prop. Variance Explain and Components Kept')
plt.xlabel('Principal Components')
plt.ylabel('Cum. Prop. Variance Expalined')

plt.scatter(num_comp, var_comp_sum)
plt.show()

reduced_data = np.array(eigvectors_sort[:12]).transpose()
proj_data = np.dot(training_tensor.transpose(),reduced_data)
proj_data = proj_data.transpose()

for i in range(proj_data.shape[0]):
    img = proj_data[i].reshape(983,800)
    if i <= 7:
        plt.subplot(2,4,1+i)
        plt.imshow(img, cmap='jet')
        plt.tick_params()
plt.show()

w = np.array([np.dot(proj_data,i) for i in normalised_training_tensor])

images_teste = load_images(r"C:\Users\solbo\OneDrive\Pictures\AL_jpeg_imagens_testes")
unknown_face        = plt.imread(r"C:\Users\solbo\OneDrive\Pictures\AL_jpeg_imagens_testes\f075.jpeg")
unknown_face_vector = np.array(unknown_face, dtype='float64').flatten()
normalised_uface_vector = np.subtract(unknown_face_vector,mean_face)
w_unknown = np.dot(proj_data, unknown_face_vector)
diff  = w - w_unknown
norms = np.linalg.norm(diff, axis=1)

count        = 0
num_images   = 0
correct_pred = 0
def recogniser(img, train_image_names,proj_data,w,index):
    global count,highest_min,num_images,correct_pred
    unknown_face        = cv2.imread(img,0)
    num_images          += 1
    unknown_face_vector = np.array(unknown_face, dtype='float64').flatten()
    normalised_uface_vector = np.subtract(unknown_face_vector,mean_face)
    
    plt.subplot(9,4,1+count)
    plt.imshow(unknown_face, cmap='gray')
    plt.title(f"Imagem proposta: {img[56:]}")
    plt.tick_params(labelleft='off', labelbottom='off', bottom='off',top='off',right='off',left='off', which='both')
    count+=1
    
    w_unknown = np.dot(proj_data, normalised_uface_vector)
    diff  = w - w_unknown
    norms = np.linalg.norm(diff, axis=1)
    index = np.argmin(norms)
    
    t1 = 100111536
    #t1 = 200535910.268 # working with 6 faces
    #t0 = 86528212
    t0 = 88831687
    #t0 = 143559033 # working with 6 faces
    
    if norms[index] < t1:
        plt.subplot(9,4,1+count)
        if norms[index] < t0: # It's a face
            if img.split('.')[0] == images_train[index].split('.')[0]:
                plt.title(f"Matched: {images_train[index].split('.')[0][48:]} {images_train[index].split('.')[1]}", color='g')
                plt.imshow(cv2.imread(images_train[index]), cmap='gray')
                
                correct_pred += 1
            else:
                plt.title(f"Matched: {images_train[index].split('.')[0][48:]} {images_train[index].split('.')[1]}", color='r')
                plt.imshow(cv2.imread(images_train[index]), cmap='gray')
        else:
            if img.split('.')[0] not in [i.split('.')[0] for i in train_image_names]:
                plt.title('Unknown face!', color='g')
                correct_pred += 1
            else:
                plt.title('Unknown face!', color='r')
        plt.tick_params(labelleft='off', labelbottom='off', bottom='off',top='off',right='off',left='off', which='both')
        plt.subplots_adjust(right=1.2, top=2.5)
    else:     
        plt.subplot(9,4,1+count)
        if len(img.split('.')) == 3:
            plt.title('Not a face!', color='r')
        else:
            plt.title('Not a face!', color='g')
            correct_pred += 1
        plt.tick_params(labelleft='off', labelbottom='off', bottom='off',top='off',right='off',left='off', which='both')
    count+=1

fig = plt.figure(figsize=(15, 15))
for i in range(len(images_teste)):
    recogniser(images_teste[i], images_teste,proj_data,w,i)

plt.show()

